[RUN]
# Select mode, you are to select strages
# mode: SDRAM,SPINOR,SPINAND,SD, NAND #
mode= SD


# "yes" if you want to burn all deivce #
 
# all_device: yes, no #
all_device = no


# "yes" if you want to pack image according to the mode #
# when pack is "yes", only multipe images are packaged into one file #
# pack: yes, no #
pack = no
pack_path = ./pattern/pack.bin

[DDR]
# Select NUC980 series to initial SDRAM
# NUC980DF61YC.ini #
# NUC980DK61Y.ini  #
# NUC980DK61YC.ini #
# NUC980DR61Y.ini  #

ddr = NUC980DK61Y.ini

[SDRAM]
# The SDRAM mode is used to download an image to
# DDR or SDRAM for debugging purpose. 

# Select “Download only” or ”Download and run”
# option: download, run #
option = run
sdram_path = ./pattern/kernel/980image
exe_addr = 0x8000


# "yes" if you are to burn dtb file.
# using_dtb: yes, no #
using_dtb = no
dtb_path = ./pattern/kernel/nuc980-dev-v1.0.dtb
dtb_addr = 0x1400000


[SPINOR]
# This mode set "run" to control SPI flash and specify the type of the image. 
# These types can be recognized by bootloader or Linux. 
# The Image type is set loader, data, environment or pack.

# program : write a new image to SPI flash
# program_verify : write a new image to SPI flash and verify image
# read : read data from SPI flash to your's computer.
# erase : erase SPI flash.
# run: program, program_verify, read, erase #
run = program

#------------------- program -------------------#
# type: data, env, loader, pack #
image_num = 3
image0_path= ./pattern/U-Boot_IMG/U-Boot-SPINOR/Winbond/u-boot.bin
image0_type = loader
image0_exe_addr = 0xe00000
image0_start_offset = 0x000000

image1_type = env
image1_path= ./pattern/U-Boot_IMG/U-Boot-SPINOR/env.txt
image1_exe_addr = 0x000000
image1_start_offset = 0x80000

image2_type = data
image2_path= ./pattern/kernel/980uimage
image2_exe_addr = 0x00000
image2_start_offset = 0x200000

# "yes" if you are using user defined to config SPINOR parameters
# using_user_defined: yes, no #
using_user_defined = no
quad_read_command = 0x6b
read_status_command = 0x35
write_status_command = 0x31
status_value = 0x2
dummy_bytes = 0x1

#------------------- read -------------------#
read_path =  ./pattern/record_spinor.bin
read_start_blocks = 0
read_offset_blocks = 10

#------------------- erase ------------------#
# erase_all: yes, no #
erase_all = yes
erase_start_blocks = 0
erase_offset_blocks = 10

[SD]
# This mode set "run" to control SD and specify the type of the image. 
# These types can be recognized by bootloader or Linux. 
# The image type is set loader, data, environment or pack.

# program : write a new image to SD
# program_verify : write a new image to SD and verify image
# read : read data from SD to your's computer.
# run: program, program_verify, read, format  #
run = program

#------------------- program -------------------#
# type: data, env, loader, pack #

####GEEN spl dit is geen spi nand...!?

image_num = 6
#image0_path= ./pattern/U-Boot_IMG/U-Boot-SPINAND/Winbond/u-boot-spl.bin
image0_path= output/build/uboot-master/spl/u-boot-spl.bin
image0_type = loader
image0_exe_addr = 0x000200
image0_start_offset = 0x00000

image1_type = data
image1_path= output/images/u-boot.bin
#image1_path= ./pattern/U-Boot_IMG/U-Boot-SPINAND/Winbond/u-boot.bin
image1_exe_addr = 0x0000
image1_start_offset = 0x100000

image2_type = data
#image2_path= nuwriter/uImageZonderSSH
#image2_path= nuwriter/uImageTooBig
#image2_path= nuwriter/uImageMetSSH
image2_path= output/images/uImage
image2_exe_addr = 0x0000
image2_start_offset = 0x200000

image3_type = env
image3_path= nuwriter/env.txt
image3_exe_addr = 0x00000
image3_start_offset = 0x80000

image4_type = data
image4_path= output/images/rootfs.ubi
image4_exe_addr = 0x00000
image4_start_offset = 0x2000000  

image5_type = data
image5_path= output/images/maasland_app.ubi
image5_exe_addr = 0x00000
image5_start_offset = 0x4000000  

#------------------- read -------------------#
read_path =  ./pattern/record_sd.bin
read_start_blocks = 0
read_offset_blocks = 10

#------------------- format ------------------#
# using_format set "yes" ,  SD/eMMC format FAT32
# using_dtb: yes, no #
using_format = yes

# reserved_size : unit of MB, 1 MB is 1024 bytes  #
reserved_size = 1024;

#Set partition number, it shuold be 1 ~ 4.
#program :
#if only one partition, partition1_size automatically assigned size, partition1_size =  SD/eMMC size - "reserved_size"
#if two partition, partition2_size automatically assigned size, partition2_size =  SD/eMMC size - "partition1_size" - "reserved_size"
#and so on
#
#pack:
#If you need 3 partition , you need to set partitions1_size, partition2_size and partition3_size
#
partition_num= 3

#Set partition 1 size, it is valid when partition_num more then or equal to 2, unit of MB, 1 MB is 1024 bytes.
partition1_size= 1024

#Set partition 2 size, it is valid when partition_num more then or eqult to 3, unit of MB, 1 MB is 1024 bytes.
partition2_size= 1024

#Set partition 3 size, it is valid when partition_num more then or equal to 4, unit of MB, 1 MB is 1024 bytes.
partition3_size= 0



[NAND]
# This mode set "run" to control NAND flash and specify the type of the image. 
# These types can be recognized by bootloader or Linux. 
# The image type is set loader, data, environment or pack.


# program : write a new image to NAND flash
# program_verify : write a new image to NAND flash and verify image
# read : read data from  NAND flash to your's computer.
# erase : erase NAND flash.
# run: program, program_verify, read, erase, #
run = program

#------------------- program -------------------#
# type: data, env, loader, pack #
image_num = 4
image0_path= ./pattern/U-Boot_IMG/U-Boot-NAND/u-boot-spl.bin
image0_type = loader
image0_exe_addr = 0x200
image0_start_offset = 0x000000

image1_type = data
image1_path= ./pattern/U-Boot_IMG/U-Boot-NAND/u-boot.bin
image1_exe_addr = 0x00000
image1_start_offset = 0x100000

image2_type = data
image2_path= ./pattern/kernel/980uimage
image2_exe_addr = 0x000000
image2_start_offset = 0x200000

image3_type = env
image3_path= ./pattern/U-Boot_IMG/U-Boot-NAND/env.txt
image3_exe_addr = 0x00000
image3_start_offset = 0x80000

# "yes" if you are using user defined to config NAND flash parameters
# using_user_defined: yes, no #
using_user_defined = no
blockperflash=1024
pageperblock=64

#------------------- read -------------------#
read_path =  ./pattern/record_nand.bin
read_start_blocks = 0
read_offset_blocks = 10

#------------------- erase ------------------#
# erase_all: yes, no #
erase_all = yes
erase_start_blocks = 0
erase_offset_blocks = 10
